# --- Build system configuration

[build-system]
# setuptools and wheel as the build backend
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

# --- Project Metadata

[project]
name = "das-anomaly"
version = "0.0.1"
description = "A Python package for detecting anomalies in DAS data."
readme = "README.md"
authors = [
  { name = "Ahmad Tourei", email = "ahmadtourei@gmail.com" }
]
# Specify the Python requirement
requires-python = ">=3.10"

classifiers = [
    "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
    "Topic :: Scientific/Engineering",
]

keywords = ["geophysics", "distributed-acoustic-sensing"]

# --- Dependencies

dependencies = [
  "dascore",
  "tensorflow",
]

[project.optional-dependencies]

all = [
    "mpi4py"
]

test = [
    "pre-commit",
    "ruff",
    "pooch",
]

# --- URLs for project

[project.urls]
"Source Code" = "https://github.com/ahmadtourei/das-anomaly"
"Bug Tracker" = "https://github.com/ahmadtourei/das-anomaly"
"Homepage" = "https://github.com/ahmadtourei/das-anomaly" 

# --- External tool configuration

[tool.ruff]

line-length = 120

# enable certain types of linting
lint.select = [
    "E",
    "F",
    "UP",
    "RUF",
    "I001",
    "D",
    "FA",
    "T",
    "N",
    "NPY",
    "NPY201",
]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "__init__.py"
]

# lowest python version supported
target-version = "py310"

lint.fixable = ["ALL"]

# List of codes to ignore
lint.ignore = ["D105", "D107", "D401", "D205", "D200", "D400"]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

# config for docstring parsing
[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.format]
# Use `\n` line endings for all files
line-ending = "lf"
